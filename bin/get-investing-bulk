#!/usr/bin/env python
"""
get-investing-bulk

This script downloads from investing.com the historical data.
"""


import pytz
import argparse

from datetime import datetime

from selenium import webdriver

from pyCBT.providers.scrappers import investing
from pyCBT.common._helpers import dump_data
from pyCBT.common.path import exist


idate = datetime(2000, 1, 1).strftime("%Y-%m-%d")
fdate = datetime.now(tz=pytz.timezone("America/New_York")).strftime("%Y-%m-%d")

parser = argparse.ArgumentParser()

parser.add_argument(
    "symbols_list",
    metavar="symbols-list",
    help="File containing the symbols list. The file should be formatted in two columns: symbol name and investing link."
)
parser.add_argument(
    "--resolution",
    help="The time resolution of the dataset.",
    choices=["Daily", "Weekly", "Monthly"],
    default="Daily"
)

args = parser.parse_args()

filelist = args.symbols_list
if not exist(filelist):
    raise IOError, "The symbols list '{}' does not exist.".format(filelist)
else:
    features_params = dict()
    with open(filelist, "r") as f:
        line = f.readline()[:-1]
        while line:
            # extract symbol and url from line and define next line
            symbol, url = line.split(",")
            line = f.readline()[:-1]
            # remove domain
            if "https" in url: investing_params = url.replace("https://www.investing.com/").split("/")
            else: investing_params = url.replace("www.investing.com/").split("/")
            # parse category and instrument
            if len(investing_params) > 2:
                category = investing_params[:-1].join("/")
                instrument = investing_params[-1].strip("/")
            # define features parameters
            features_params[symbol] = dict(category=category, instrument=instrument)

chrome = webdriver.Chrome()
for feature in features_params:
    print "downloading {}...".format(feature),

    category = features_params.get(feature)["category"]
    instrument = features_params.get(feature)["instrument"]

    if category == "economic-data":
        filename = "{}_{}.csv".format(category, instrument)
        if exist(filename):
            print "done"
            continue
            investing_data = investing.EconomicData(
            calendar=instrument,
            from_date=idate,
            to_date=fdate,
            browser=chrome
            )
    else:
        filename = "{}_{}_{}.csv".format(category, args.resolution.lower(), instrument)
        if exist(filename):
            print "done"
            continue
            investing_data = investing.FinancialData(
            category=category,
            instrument=instrument,
            resolution=args.resolution,
            from_date=idate,
            to_date=fdate,
            browser=chrome
            )

    table = investing_data.as_dataframe()
    print table.index[0].date(), table.index[-1].date()
    dump_data(table, **{"save_to": filename})
chrome.close()
