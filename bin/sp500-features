#!/usr/bin/env python

import pandas as pd
import urllib2
import string
import locale
import re

from collections import OrderedDict
from pyCBT.common.timezone import parse_tz

def _parse_dates(cell):
    """Returns the parsed dates formatted as %Y-%m-%d.
    """
    m = re.findall(r"\(\w+\)", cell)
    if m: cell = cell.replace(m.pop(), "")
    cell = parse_tz(datetime_str=cell, in_tz="America/New_York").strftime("%Y-%m-%d")
    return cell

def _parse_units(cell):
    """Returns a dataframe with numeric column.
    """
    units = {
        "K": 1000.0,
        "M": 1000000.0,
        "%": 1.0
    }
    cell = locale.atof(cell[:-1])*units.get(cell.strip()[-1], 1.0) if hasattr(cell, "strip") else cell
    return cell

base_url = "https://www.investing.com/{category}/{value}"

opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]

response = opener.open(base_url.format(**{"category": "indices", "value": "us-spx-500"}) + "-historical-data")
html_table = response.read()
sp500, = pd.read_html(
    io=html_table,
    attrs={"id":"curr_table"},
    index_col="Date",
    parse_dates=True
)
index = sp500.index.sort_values()

names = [
    "S&P 500",
    "DAX",
    "DJA",
    "DJI",
    "DXY",
    "FCHI",
    "FTSE",
    "HSI",
    "NASDAQ",
    "NYA",
    "Nikkei",
    "SSE",
    "VIX",
    "VXN",
    "VXO",
    "Consumer disc.",
    "Consumer stap.",
    "Energy",
    "Financials",
    "Health care",
    "Industrials",
    "Inf. tech.",
    "Materials",
    "Real state",
    "Utilities",
    "AAPL",
    "AMZN",
    "BRK-B",
    "FB",
    "GOOG",
    "JNJ",
    "JPM",
    "MSFT",
    "XOM",
    "Crude oil",
    "Gold",
    "EURUSD",
    "GBPUSD",
    "USDCAD",
    "USDCNY",
    "USDJPY",
    "ADP nonfarm employment",
    "Average hourly earnings",
    "CB consumer confidence",
    "Core CPI",
    "GDP",
    "Interest rate decision",
    "Nonfarm payrolls",
    "PPI",
    "unemployment rate"
]
url_params = [
    {"category": "indices", "value": "us-spx-500"},
    {"category": "indices", "value": "germany-30"},
    {"category": "indices", "value": "dj-composite-average"},
    {"category": "indices", "value": "us-30"},
    {"category": "indices", "value": "usdollar"},
    {"category": "indices", "value": "france-40"},
    {"category": "indices", "value": "uk-100"},
    {"category": "indices", "value": "hang-sen-40"},
    {"category": "indices", "value": "nasdaq-composite"},
    {"category": "indices", "value": "nyse-composite"},
    {"category": "indices", "value": "japan-ni225"},
    {"category": "indices", "value": "shanghai-composite"},
    {"category": "indices", "value": "volatility-s-p-500"},
    {"category": "indices", "value": "cboe-nasdaq-100-voltility"},
    {"category": "indices", "value": "cboe-oex-implied-volatility"},
    {"category": "indices", "value": "s-p-500-consumer-discretionary"},
    {"category": "indices", "value": "s-p-500-consumer-staples"},
    {"category": "indices", "value": "s-p-500-energy"},
    {"category": "indices", "value": "s-p-500-financial"},
    {"category": "indices", "value": "s-p-500-health-care"},
    {"category": "indices", "value": "s-p-500-industrials"},
    {"category": "indices", "value": "s-p-500-information-technology"},
    {"category": "indices", "value": "s-p-500-materials"},
    {"category": "indices", "value": "s-p-500-telecom-services"},
    {"category": "indices", "value": "s-p-500-utilities"},
    {"category": "equities", "value": "apple-computer-inc"},
    {"category": "equities", "value": "amazon-com-inc"},
    {"category": "equities", "value": "berkshire-hathaway"},
    {"category": "equities", "value": "facebook-inc"},
    {"category": "equities", "value": "google-inc-c"},
    {"category": "equities", "value": "johnson-johnson"},
    {"category": "equities", "value": "jp-morgan-chase"},
    {"category": "equities", "value": "microsoft-corp"},
    {"category": "equities", "value": "exxon-mobil"},
    {"category": "commodities", "value": "crude-oil"},
    {"category": "commodities", "value": "gold"},
    {"category": "currencies", "value": "eur-usd"},
    {"category": "currencies", "value": "gbp-usd"},
    {"category": "currencies", "value": "usd-cad"},
    {"category": "currencies", "value": "usd-cny"},
    {"category": "currencies", "value": "usd-jpy"},
    {"category": "economic-calendar", "value": "adp-nonfarm-employment-change-1"},
    {"category": "economic-calendar", "value": "nonfarm-payrolls-227"},
    {"category": "economic-calendar", "value": "unemployment-rate-300"},
    {"category": "economic-calendar", "value": "ppi-238"},
    {"category": "economic-calendar", "value": "gdp-375"},
    {"category": "economic-calendar", "value": "interest-rate-decision-168"},
    {"category": "economic-calendar", "value": "core-cpi-56"},
    {"category": "economic-calendar", "value": "average-hourly-earnings-8"},
    {"category": "economic-calendar", "value": "cb-consumer-confidence-48"}
]
features = OrderedDict(zip(names, url_params))
features_table = pd.DataFrame(index=index, data=None)
for feature in features:
    print feature, base_url.format(**features.get(feature))
    if features.get(feature)["category"] == "economic-calendar":
        response = opener.open(base_url.format(**features.get(feature)))
        html_table = response.read()

        _ = features.get(feature)["value"].split("-")
        calendar, id = string.join(_[:-1], "-"), _[-1]
        table, = pd.read_html(
            io=html_table,
            attrs={"id":"eventHistoryTable{}".format(id)}
        )
        # set index
        table.insert(0, "Date", value=table["Release Date"]+" "+table["Time"])
        table["Date"] = table["Date"].apply(_parse_dates)
        table.set_index("Date", inplace=True)
        table.index = pd.to_datetime(table.index)
        table.sort_index(inplace=True)
        table.ffill(inplace=True)
        # clean table
        table = table.get("Actual")
        table = table.apply(_parse_units)
        # verify time sampling
        table = table.resample("BM").nearest()
        if feature == "GDP": table = table.shift(-3, freq="BM")
        table.ffill(inplace=True)
        # filter columns
        features_table[feature] = table.copy()
    else:
        response = opener.open(base_url.format(**features.get(feature)) + "-historical-data")
        html_table = response.read()

        if feature == "S&P 500":
            table = sp500
        else:
            table, = pd.read_html(
                io=html_table,
                attrs={"id":"curr_table"},
                index_col="Date",
                parse_dates=True
            )
        # filter columns
        features_table[feature] = table.get("Price")
    # time alignment
    if feature == "Interest rate decision":
        features_table[feature] = features_table[feature].reindex(index, method="bfill")
    elif features.get(feature)["category"] == "economic-calendar":
        features_table[feature] = features_table[feature].reindex(index, method="ffill")

features_table.dropna(inplace=True)
features_table.reset_index().to_excel("sp500_features.xlsx", index=False)
