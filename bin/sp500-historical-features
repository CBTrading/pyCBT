#!/usr/bin/env python

import pytz
import argparse

from datetime import datetime

from selenium import webdriver

from pyCBT.providers.scrappers import investing
from pyCBT.common._constants import features_params
from pyCBT.common._helpers import dump_data
from pyCBT.common.path import exist

# TODO: add list of instruments/assets as command line argument

idate = datetime(2000, 1, 1).strftime("%Y-%m-%d")
fdate = datetime.now(tz=pytz.timezone("America/New_York")).strftime("%Y-%m-%d")

parser = argparse.ArgumentParser()

parser.add_argument(
    "--resolution",
    help="The time resolution of the dataset.",
    choices=["Daily", "Weekly", "Monthly"],
    default="Daily"
)

args = parser.parse_args()

chrome = webdriver.Chrome()
for feature in features_params:
    print "downloading {}...".format(feature),
    if features_params.get(feature)["category"] == "economic-calendar":
        filename = "{}.csv".format(features_params.get(feature)["instrument"])
        if exist(filename):
            print "done"
            continue
        investing_data = investing.EconomicData(
            calendar=features_params.get(feature)["instrument"],
            from_date=idate,
            to_date=fdate,
            browser=chrome
        )
    else:
        filename = "{}-{}.csv".format(args.resolution.lower(), features_params.get(feature)["instrument"])
        if exist(filename):
            print "done"
            continue
        investing_data = investing.FinancialData(
            category=features_params.get(feature)["category"],
            instrument=features_params.get(feature)["instrument"],
            resolution=args.resolution,
            from_date=idate,
            to_date=fdate,
            browser=chrome
        )
    table = investing_data.as_dataframe()
    print table.index[0].date(), table.index[-1].date()
    dump_data(table, **{"save_to": filename})
chrome.close()
